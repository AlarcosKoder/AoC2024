package AoC2022;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Day18 extends Day {

	private List<Cuboid> cuboids;
	private List<Cuboid> virtuals;
	private HashMap<String,Cuboid> allCubes;
	private HashMap<String,Cuboid> virtualMap;
	private HashMap<String, Cuboid> cubemap;
//	private TreeMap<Integer, Cuboid> cubeXmap;
//	private TreeMap<Integer, Cuboid> cubeYmap;
//	private TreeMap<Integer, Cuboid> cubeZmap;
	private boolean[][][] matrix;
	private boolean[][][] vmatrix;
	
	private int maxX;
	private int maxY;
	private int maxZ;
	
	private int surface;
	
	class Cuboid {
		int x;
		int y;
		int z;
		
		boolean hole;
		boolean virtual;
		
//		Cuboid x_p;
//		Cuboid x_m;
//		Cuboid y_p;
//		Cuboid y_m;
//		Cuboid z_p;
//		Cuboid z_m;
		
		public Cuboid(int x, int y, int z) {
			this.x=x;
			this.y=y;
			this.z=z;
		}
		public boolean isWithin(int i, int j, int k) {
			return i+0.5<=x&&j+0.5<=y&&k+0.5<=z;
		}
		@Override
		public String toString() {
			return x+","+y+","+z;
		}
	}
	
	public Day18() {
		cuboids = new ArrayList<>();
		virtuals= new ArrayList<>();
		virtualMap= new HashMap<>();
		cubemap = new HashMap<>();
		allCubes = new HashMap<>();
//		cubeXmap = new TreeMap<>();
//		cubeYmap = new TreeMap<>();
//		cubeZmap = new TreeMap<>();
		maxX=0;
		maxY=0;
		maxZ=0;
		surface=0;
	}
	
	public void fillStructure() {
		String[] lines = sb.toString().split("\n");
		for(String line:lines) {
			String[] coords = line.split(",");
			Cuboid c = new Cuboid(Integer.parseInt(coords[0]),Integer.parseInt(coords[1]), Integer.parseInt(coords[2]));
			cubemap.put(c.toString(), c);
			allCubes.put(c.toString(), c);
//			cubeXmap.put(c.x, c);
//			cubeYmap.put(c.y, c);
//			cubeZmap.put(c.z, c);
			cuboids.add(c);
			if(c.x>maxX) maxX = c.x;
			if(c.y>maxY) maxY = c.y;
			if(c.z>maxZ) maxZ = c.z;
		}
		matrix = new boolean[maxX+2][maxY+2][maxZ+2];
		vmatrix = new boolean[maxX+2][maxY+2][maxZ+2];
		for(Cuboid c:cuboids) {
			matrix[c.x][c.y][c.z]=true;
		}
	}
	
//	public Cuboid getNextX(Cuboid c, int x, int y, int z) {
//		return cubemap.get((c.x+x)+","+(c.y+y)+","+(c.z+z));
//	}
	
	public void part1() {
		System.out.println("cuboids length:"+cuboids.size());
		System.out.println("MaxX:"+maxX);
		System.out.println("MaxY:"+maxY);
		System.out.println("MaxZ:"+maxZ);
		

		for(Cuboid c:cuboids) {
			if(matrix[c.x][c.y][c.z]) {
				if(!matrix[c.x+1][c.y][c.z]) surface++;
				if(c.x==0 || !matrix[c.x-1][c.y][c.z]) surface++;
				if(!matrix[c.x][c.y+1][c.z]) surface++;
				if(c.y==0 ||!matrix[c.x][c.y-1][c.z]) surface++;
				if(!matrix[c.x][c.y][c.z+1]) surface++;
				if(c.z==0 ||!matrix[c.x][c.y][c.z-1]) surface++;
			}
		}
		
		System.out.println("solution part1: "+surface);
		
//		for(Cuboid c:cuboids) {
//			
//			// /*WORKING PART1
//			Cuboid c_x_p = getNextX(c,1,0,0);
//			Cuboid c_x_m = getNextX(c,-1,0,0);
//			Cuboid c_y_p = getNextX(c,0,1,0);
//			Cuboid c_y_m = getNextX(c,0,-1,0);
//			Cuboid c_z_p = getNextX(c,0,0,1);
//			Cuboid c_z_m = getNextX(c,0,0,-1);
//			
//			if(c_x_p != null && !c_x_p.virtual) {
//				c.x_p=c_x_p;
//				c_x_p.x_m=c;
//			} else {
//				// meg kell talalni a legkozelebbi kovetkezo igazit, 
//				// ha van akkor bevirtualozni, ha nincs akkor ennyi
//				Cuboid nextReal=null;
//				for(int x = c.x; x<maxX;x++) {
//					if((nextReal=getNextX(c,x,0,0))!=null) {
//						break;
//					}
//				}
//				if(nextReal!=null) {
//					for(int x = c.x+1; x<nextReal.x;x++) {
//						Cuboid v = new Cuboid(x, c.y, c.z);
//						v.virtual=true;
//						if(!virtualMap.containsKey(v.toString())) {
//							virtualMap.put(v.toString(),v);
//							virtuals.add(v);
//						} else
//							System.out.println("már benne");
//					}
//				}
//			}
//				
//			if(c_x_m != null && !c_x_m.virtual) {
//				c.x_m=c_x_m;
//				c_x_m.x_p=c;
//			} else {
//				Cuboid nextReal=null;
//				for(int x = c.x; x>1;x--) {
//					if((nextReal=getNextX(c,x,0,0))!=null) {
//						break;
//					}
//				}
//				if(nextReal!=null) {
//					for(int x = c.x-1; x>nextReal.x;x--) {
//						Cuboid v = new Cuboid(x, c.y, c.z);
//						v.virtual=true;
//						if(!virtualMap.containsKey(v.toString())) {
//							virtualMap.put(v.toString(),v);
//							virtuals.add(v);
//						} else
//							System.out.println("már benne");
//					}
//				}
//			}
//			
//			if(c_y_p != null && !c_y_p.virtual) {
//				c.y_p=c_y_p;
//				c_y_p.y_m=c;
//			} else if(c.y+1<maxY) {
//				Cuboid nextReal=null;
//				for(int y = c.y; y<maxY;y++) {
//					if((nextReal=getNextX(c,0,y,0))!=null) {
//						break;
//					}
//				}
//				if(nextReal!=null) {
//					for(int y = c.y+1; y<nextReal.y;y++) {
//						Cuboid v = new Cuboid(c.x, y, c.z);
//						v.virtual=true;
//						if(!virtualMap.containsKey(v.toString())) {
//							virtualMap.put(v.toString(),v);
//							virtuals.add(v);
//						} else
//							System.out.println("már benne");
//					}
//				}
//			}
//			
//			if(c_y_m != null && !c_y_m.virtual) {
//				c.y_m=c_y_m;
//				c_y_m.y_p=c;
//			} else if(c.y-1>0) {
//				Cuboid nextReal=null;
//				for(int y = c.y; y>1;y--) {
//					if((nextReal=getNextX(c,0,y,0))!=null) {
//						break;
//					}
//				}
//				if(nextReal!=null) {
//					for(int y = c.y-1; y>nextReal.y;y--) {
//						Cuboid v = new Cuboid(c.x, y, c.z);
//						v.virtual=true;
//						if(!virtualMap.containsKey(v.toString())) {
//							virtualMap.put(v.toString(),v);
//							virtuals.add(v);
//						} else
//							System.out.println("már benne");
//					}
//				}
//			}
//			
//			if(c_z_p != null && !c_z_p.virtual) {
//				c.z_p=c_z_p;
//				c_z_p.z_m=c;
//			} else if(c.z+1<maxZ) {
//				Cuboid nextReal=null;
//				for(int z = c.z; z<maxZ;z++) {
//					if((nextReal=getNextX(c,0,0,z))!=null) {
//						break;
//					}
//				}
//				if(nextReal!=null) {
//					for(int z = c.z+1; z<nextReal.z;z++) {
//						Cuboid v = new Cuboid(c.x, c.y, z);
//						v.virtual=true;
//						if(!virtualMap.containsKey(v.toString())) {
//							virtualMap.put(v.toString(),v);
//							virtuals.add(v);
//						}else
//							System.out.println("már benne");
//					}
//				}
//			}
//			if(c_z_m != null && !c_z_m.virtual) {
//				c.z_m=c_z_m;
//				c_z_m.z_p=c;
//			} else if(c.z-1>0) {
//				Cuboid nextReal=null;
//				for(int z = c.z; z>1;z--) {
//					if((nextReal=getNextX(c,0,0,z))!=null) {
//						break;
//					}
//				}
//				if(nextReal!=null) {
//					for(int z = c.z-1; z>nextReal.z;z--) {
//						Cuboid v = new Cuboid(c.x, c.y, z);
//						v.virtual=true;
//						if(!virtualMap.containsKey(v.toString())) {
//							virtualMap.put(v.toString(),v);
//							virtuals.add(v);
//						}else
//							System.out.println("már benne");
//					}
//				}
//			}
//			//*/
//		}
//		
//		for(Cuboid c:cuboids) {
//			if(c.x_p==null) surface++;
//			if(c.x_m==null) surface++;
//			if(c.y_p==null) surface++;
//			if(c.y_m==null) surface++;
//			if(c.z_p==null) surface++;
//			if(c.z_m==null) surface++;
//		}
//		System.out.println("solution part1:"+surface);
	}
	
	public void part2() {
//		System.out.println("oldvirtuals: "+virtuals.size());
		
		//oldvirtuals: 1492
//		virtuals =new ArrayList<>();
		
		for(Cuboid c:cuboids) {
			// X ha nincs folotte a sorban
			int index = -1;
			for(int i=c.x+1;i<=maxX;i++) {
				if(matrix[i][c.y][c.z]) {
					index = i;
					break;
				}
			}
			if(index>=0) {
				for(int i=(c.x+1);i<index;i++) {
//					if(matrix[i][c.y][c.z]) {
						Cuboid v = new Cuboid(i, c.y, c.z);
						v.virtual=true;
						if(!virtualMap.containsKey(v.toString())) {
							virtuals.add(v);
							virtualMap.put(v.toString(), v);
						}
//					}
				}
			}
			
			// X ha nincs alatta a sorban
			index = -1;
			if(c.x>=1) {
				for(int i=c.x-1;i>=0;i--) {
					if(matrix[i][c.y][c.z]) {
						index = i;
						break;
					}
				}
			}
			if(index>=0) {
				for(int i=c.x-1;i>index;i--) {
//					if(matrix[i][c.y][c.z]) {
						Cuboid v = new Cuboid(i, c.y, c.z);
						v.virtual=true;
						if(!virtualMap.containsKey(v.toString())) {
							virtuals.add(v);
							virtualMap.put(v.toString(), v);
						}
//					}
				}
			}
			
			
			// Y ha nincs folotte a sorban
			index = -1;
			for(int j=c.y+1;j<=maxY;j++) {
				if(matrix[c.x][j][c.z]) {
					index = j;
					break;
				}
			}
			if(index>=0) {
				for(int j=(c.y+1);j<index;j++) {
//					if(matrix[c.x][j][c.z]) {
						Cuboid v = new Cuboid(c.x, j, c.z);
						v.virtual=true;
						if(!virtualMap.containsKey(v.toString())) {
							virtuals.add(v);
							virtualMap.put(v.toString(), v);
						}
//					}
				}
			}
			
			// Y ha nincs alatta a sorban
			index = -1;
			if(c.y>=1) {
				for(int j=c.y-1;j>=0;j--) {
					if(matrix[c.x][j][c.z]) {
						index = j;
						break;
					}
				}
			}
			if(index>=0) {
				for(int j=c.y-1;j>index;j--) {
//					if(matrix[c.x][j][c.z]) {
						Cuboid v = new Cuboid(c.x, j, c.z);
						v.virtual=true;
						if(!virtualMap.containsKey(v.toString())) {
							virtuals.add(v);
							virtualMap.put(v.toString(), v);
						}
//					}
				}
			}
			
			//Z ha nincs folotte a sorban
			index = -1;
			for(int k=c.z+1;k<=maxZ;k++) {
				if(matrix[c.x][c.y][k]) {
					index = k;
					break;
				}
			}
			if(index>=0) {
				for(int k=(c.z+1);k<index;k++) {
//					if(matrix[c.x][c.y][k]) {
						Cuboid v = new Cuboid(c.x, c.y, k);
						v.virtual=true;
						if(!virtualMap.containsKey(v.toString())) {
							virtuals.add(v);
							virtualMap.put(v.toString(), v);
						}
//					}
				}
			}
			
			//Z ha nincs alatta a sorban
			index = -1;
			if(c.z>=1) {
				for(int k=c.z-1;k>=0;k--) {
					if(matrix[c.x][c.y][k]) {
						index = k;
						break;
					}
				}
			}
			if(index>=0) {
				for(int k=c.z-1;k>index;k--) {
//					if(matrix[c.x][c.y][k]) {
						Cuboid v = new Cuboid(c.x, c.y, k);
						v.virtual=true;
						if(!virtualMap.containsKey(v.toString())) {
							virtuals.add(v);
							virtualMap.put(v.toString(), v);
						}
//					}
				}
			}
			
		}
		
		List<Cuboid> trueVirtuals = new ArrayList<>();
		for(Cuboid v:virtuals) {
			//minden virtualra megnézzük hogy minden oldalra van e rendes elem tole minden iranyban
			boolean found_x_p = false;
			boolean found_x_m = false;
			for (int i = v.x+1;i<=maxX;i++) {
				if(matrix[i][v.y][v.z]) {
					found_x_p = true;
					break;
				}
			}
			for (int i = v.x-1;i>=0;i--) {
				if(matrix[i][v.y][v.z]) {
					found_x_m = true;
					break;
				}
			}
			
			boolean found_y_p = false;
			boolean found_y_m = false;
			for (int j = v.y+1;j<=maxY;j++) {
				if(matrix[v.x][j][v.z]) {
					found_y_p = true;
					break;
				}
			}
			for (int j = v.y-1;j>=0;j--) {
				if(matrix[v.x][j][v.z]) {
					found_y_m = true;
					break;
				}
			}
			
			boolean found_z_p = false;
			boolean found_z_m = false;
			for (int k = v.z+1;k<=maxZ;k++) {
				if(matrix[v.x][v.y][k]) {
					found_z_p = true;
					break;
				}
			}
			for (int k = v.z-1;k>=0;k--) {
				if(matrix[v.x][v.y][k]) {
					found_z_m = true;
					break;
				}
			}
			
			if(found_x_p && found_x_m && found_y_p && found_y_m && found_z_p && found_z_m) {
				trueVirtuals.add(v);
			}
		}
		virtuals.clear();
		virtuals.addAll(trueVirtuals);
		virtualMap.clear();
		
		for(Cuboid v:virtuals) {
			vmatrix[v.x][v.y][v.z]=true;
			virtualMap.put(v.toString(), v);
			allCubes.put(v.toString(), v);
		}
		
		
		System.out.println("virtuals ["+virtuals.size()+"]: "+virtuals);
		
//		System.out.println("Solution part2: " +(surface-surfaceReduction));
//		System.out.println("cuboids:"+cubemap.size());
//		System.out.println("virtuals:"+virtualMap.size()+" list:"+virtualMap);
//		
//		for(Cuboid c:virtuals) {
//			cubemap.put(c.toString(), c);
//		}
//		
//		for(Cuboid c:virtuals) {
//			
//			// /*WORKING PART1
//			Cuboid c_x_p = getNextX(c,1,0,0);
//			Cuboid c_x_m = getNextX(c,-1,0,0);
//			Cuboid c_y_p = getNextX(c,0,1,0);
//			Cuboid c_y_m = getNextX(c,0,-1,0);
//			Cuboid c_z_p = getNextX(c,0,0,1);
//			Cuboid c_z_m = getNextX(c,0,0,-1);
//			
//			if(c_x_p != null && c_x_p.virtual) {
//				c.x_p=c_x_p;
//				c_x_p.x_m=c;
//			}
//			if(c_x_m != null && c_x_m.virtual) {
//				c.x_m=c_x_m;
//				c_x_m.x_p=c;
//			}
//			if(c_y_p != null && c_y_p.virtual) {
//				c.y_p=c_y_p;
//				c_y_p.y_m=c;
//			}
//			if(c_y_m != null && c_y_m.virtual) {
//				c.y_m=c_y_m;
//				c_y_m.y_p=c;
//			}
//			if(c_z_p != null && c_z_p.virtual) {
//				c.z_p=c_z_p;
//				c_z_p.z_m=c;
//			} 
//			if(c_z_m != null && c_z_m.virtual) {
//				c.z_m=c_z_m;
//				c_z_m.z_p=c;
//			}
//		}
//		// blokkokra kell szedni
		List<Cuboid> unprocessed = new ArrayList<>(virtuals);
		HashMap<Integer, List<Cuboid>> blocks = new HashMap<>();
		int blockCounter = 1;
		while (unprocessed.size()>0) {
			List<Cuboid> processed = new ArrayList<>();
			
			Cuboid blockElement = unprocessed.get(0);
			processed.add(blockElement);
			unprocessed.remove(blockElement);
			
			List<Cuboid> connections = getConnections(blockElement,processed,unprocessed);
			blocks.put(Integer.valueOf(blockCounter), connections);
			blockCounter++;
		}
//		System.out.println("virtual blocks:"+blocks.size());
//		for(Integer key:blocks.keySet()) {
//			List<Cuboid> connections = blocks.get(key);
//			System.out.println("BLOCK - "+key);
//			System.out.println("\t connections:"+connections);
//			System.out.println();
//		}
		
		int surfaceReduction = 0;
		
		for(Integer bI:blocks.keySet()) {
			List<Cuboid> virtualList = blocks.get(bI);
			boolean trueHole = true;
			for(Cuboid c:virtualList) {
				Cuboid c_x_p = allCubes.get(getCubeKey(c.x+1,c.y,c.z));
				Cuboid c_x_m = allCubes.get(getCubeKey(c.x-1,c.y,c.z));
				Cuboid c_y_p = allCubes.get(getCubeKey(c.x,c.y+1,c.z));
				Cuboid c_y_m = allCubes.get(getCubeKey(c.x,c.y-1,c.z));
				Cuboid c_z_p = allCubes.get(getCubeKey(c.x,c.y,c.z+1));
				Cuboid c_z_m = allCubes.get(getCubeKey(c.x,c.y,c.z-1));
				
				if(c_x_p==null || c_x_m == null || c_y_p == null|| c_y_m == null|| c_z_p == null|| c_z_m == null) {
					trueHole = false;
					break;
				}
			}
			if(trueHole) {
//				System.out.println("FOUND TRUE HOLE: "+virtualList);
				
				for(Cuboid c:virtualList) {
					if(vmatrix[c.x][c.y][c.z]) {
						if(!vmatrix[c.x+1][c.y][c.z]) surfaceReduction++;
						if(c.x==0 || !vmatrix[c.x-1][c.y][c.z]) surfaceReduction++;
						if(!vmatrix[c.x][c.y+1][c.z]) surfaceReduction++;
						if(c.y==0 ||!vmatrix[c.x][c.y-1][c.z]) surfaceReduction++;
						if(!vmatrix[c.x][c.y][c.z+1]) surfaceReduction++;
						if(c.z==0 ||!vmatrix[c.x][c.y][c.z-1]) surfaceReduction++;
					}
				}
				
//				System.out.println("Surface reduction: " +surfaceReduction);
			}
		}
		
		System.out.println("Solution part2: " +(surface-surfaceReduction));
		/*
				virtuals:1492 list:{6,5,12=6,5,12, 6,5,13=6,5,13, 6,5,10=6,5,10, 6,5,11=6,5,11, 13,13,10=13,13,10, 10,10,13=10,10,13, 10,10,14=10,10,14, 10,10,11=10,10,11, 10,10,12=10,10,12, 10,10,18=10,10,18, 10,10,15=10,10,15, 10,10,16=10,10,16, 3,14,10=3,14,10, 15,15,7=15,15,7, 13,13,13=13,13,13, 13,13,14=13,13,14, 13,13,11=13,13,11, 5,13,11=5,13,11, 5,13,10=5,13,10, 5,13,12=5,13,12, 12,6,3=12,6,3, 7,10,10=7,10,10, 12,6,7=12,6,7, 17,9,6=17,9,6, 12,6,8=12,6,8, 12,6,5=12,6,5, 6,13,5=6,13,5, 12,6,9=12,6,9, 6,13,7=6,13,7, 6,13,8=6,13,8, 7,10,11=7,10,11, 6,13,9=6,13,9, 7,10,12=7,10,12, 3,10,8=3,10,8, 7,10,13=7,10,13, 7,10,14=7,10,14, 3,10,9=3,10,9, 11,8,4=11,8,4, 11,8,5=11,8,5, 11,8,6=11,8,6, 11,8,7=11,8,7, 11,8,8=11,8,8, 7,11,8=7,11,8, 7,11,7=7,11,7, 11,8,9=11,8,9, 7,11,9=7,11,9, 16,11,7=16,11,7, 7,7,10=7,7,10, 7,7,11=7,7,11, 16,11,5=16,11,5, 7,7,12=7,7,12, 16,11,6=16,11,6, 7,7,13=7,7,13, 7,7,14=7,7,14, 16,11,9=16,11,9, 3,9,9=3,9,9, 3,9,8=3,9,8, 11,16,11=11,16,11, 5,5,9=5,5,9, 5,5,8=5,5,8, 15,5,10=15,5,10, 4,7,8=4,7,8, 12,14,8=12,14,8, 12,14,9=12,14,9, 4,7,9=4,7,9, 12,14,6=12,14,6, 12,14,7=12,14,7, 7,12,10=7,12,10, 7,12,12=7,12,12, 7,12,11=7,12,11, 16,14,11=16,14,11, 7,12,14=7,12,14, 7,12,13=7,12,13, 11,4,10=11,4,10, 11,4,13=11,4,13, 11,4,12=11,4,12, 11,4,11=11,4,11, 10,12,12=10,12,12, 10,12,11=10,12,11, 10,12,10=10,12,10, 12,4,11=12,4,11, 12,4,10=12,4,10, 16,5,11=16,5,11, 7,9,10=7,9,10, 7,9,12=7,9,12, 13,10,6=13,10,6, 13,10,5=13,10,5, 7,9,11=7,9,11, 7,9,14=7,9,14, 13,10,4=13,10,4, 7,9,13=7,9,13, 13,10,3=13,10,3, 13,10,9=13,10,9, 13,10,8=13,10,8, 8,16,11=8,16,11, 13,10,7=13,10,7, 13,4,4=13,4,4, 15,13,9=15,13,9, 13,4,5=13,4,5, 15,13,8=15,13,8, 13,4,7=13,4,7, 13,4,8=13,4,8, 13,8,11=13,8,11, 13,8,12=13,8,12, 13,8,10=13,8,10, 12,4,9=12,4,9, 12,4,7=12,4,7, 11,14,3=11,14,3, 12,4,8=12,4,8, 11,14,6=11,14,6, 11,14,8=11,14,8, 11,14,7=11,14,7, 6,15,5=6,15,5, 11,14,9=11,14,9, 11,6,6=11,6,6, 11,6,7=11,6,7, 11,6,8=11,6,8, 11,6,9=11,6,9, 11,6,5=11,6,5, 9,11,11=9,11,11, 9,11,10=9,11,10, 9,11,13=9,11,13, 9,11,12=9,11,12, 9,11,15=9,11,15, 9,11,14=9,11,14, 9,11,16=9,11,16, 10,8,7=10,8,7, 10,12,16=10,12,16, 10,12,15=10,12,15, 10,8,8=10,8,8, 10,8,5=10,8,5, 10,12,14=10,12,14, 10,12,13=10,12,13, 10,8,6=10,8,6, 15,10,12=15,10,12, 10,8,4=10,8,4, 15,10,13=15,10,13, 15,10,10=15,10,10, 10,12,18=10,12,18, 15,10,11=15,10,11, 9,8,7=9,8,7, 9,8,8=9,8,8, 9,8,9=9,8,9, 16,13,9=16,13,9, 10,8,9=10,8,9, 5,7,9=5,7,9, 13,11,13=13,11,13, 9,8,1=9,8,1, 5,7,8=5,7,8, 13,11,14=13,11,14, 5,7,7=5,7,7, 13,11,11=13,11,11, 9,8,3=9,8,3, 9,8,4=9,8,4, 5,7,6=5,7,6, 13,11,12=13,11,12, 9,8,5=9,8,5, 9,8,6=9,8,6, 5,7,4=5,7,4, 13,11,10=13,11,10, 4,9,6=4,9,6, 4,9,8=4,9,8, 13,8,16=13,8,16, 4,9,7=4,9,7, 13,8,13=13,8,13, 4,9,9=4,9,9, 13,8,14=13,8,14, 6,5,9=6,5,9, 13,6,10=13,6,10, 6,5,8=6,5,8, 6,5,7=6,5,7, 12,11,15=12,11,15, 12,11,14=12,11,14, 12,11,13=12,11,13, 12,11,12=12,11,12, 12,11,11=12,11,11, 12,11,10=12,11,10, 7,3,9=7,3,9, 7,3,8=7,3,8, 4,11,10=4,11,10, 7,3,7=7,3,7, 4,11,13=4,11,13, 4,11,11=4,11,11, 4,11,12=4,11,12, 4,11,16=4,11,16, 16,9,13=16,9,13, 13,12,9=13,12,9, 16,9,11=16,9,11, 13,12,4=13,12,4, 13,12,8=13,12,8, 13,12,7=13,12,7, 13,12,5=13,12,5, 13,6,15=13,6,15, 13,6,11=13,6,11, 12,2,7=12,2,7, 12,2,8=12,2,8, 17,5,7=17,5,7, 12,2,6=12,2,6, 11,12,4=11,12,4, 11,12,6=11,12,6, 12,2,9=12,2,9, 11,12,5=11,12,5, 11,12,8=11,12,8, 11,12,7=11,12,7, 11,12,9=11,12,9, 11,4,8=11,4,8, 16,7,7=16,7,7, 11,6,13=11,6,13, 11,4,9=11,4,9, 16,7,6=16,7,6, 14,8,16=14,8,16, 11,6,14=11,6,14, 11,6,15=11,6,15, 2,7,5=2,7,5, 11,6,10=11,6,10, 16,7,9=16,7,9, 11,6,11=11,6,11, 16,7,8=16,7,8, 11,6,12=11,6,12, 11,4,7=11,4,7, 4,10,9=4,10,9, 4,10,8=4,10,8, 4,10,7=4,10,7, 4,10,5=4,10,5, 15,9,8=15,9,8, 4,10,4=4,10,4, 10,6,9=10,6,9, 15,9,7=15,9,7, 10,6,7=10,6,7, 12,2,11=12,2,11, 15,9,9=15,9,9, 10,6,8=10,6,8, 10,6,5=10,6,5, 10,6,6=10,6,6, 3,5,8=3,5,8, 3,12,10=3,12,10, 8,18,10=8,18,10, 5,11,15=5,11,15, 5,11,16=5,11,16, 5,11,10=5,11,10, 5,11,11=5,11,11, 5,11,12=5,11,12, 5,11,13=5,11,13, 8,4,15=8,4,15, 6,3,9=6,3,9, 8,4,10=8,4,10, 8,4,13=8,4,13, 8,4,12=8,4,12, 8,4,11=8,4,11, 10,16,7=10,16,7, 13,14,9=13,14,9, 13,14,8=13,14,8, 10,16,9=10,16,9, 10,16,8=10,16,8, 3,10,11=3,10,11, 3,10,12=3,10,12, 3,10,13=3,10,13, 13,14,6=13,14,6, 3,10,10=3,10,10, 6,10,14=6,10,14, 9,18,10=9,18,10, 6,10,12=6,10,12, 6,10,13=6,10,13, 6,10,10=6,10,10, 6,10,11=6,10,11, 6,7,11=6,7,11, 9,9,15=9,9,15, 9,9,16=9,9,16, 6,7,10=6,7,10, 9,9,13=9,9,13, 11,10,4=11,10,4, 17,7,6=17,7,6, 11,10,3=11,10,3, 9,9,14=9,9,14, 11,10,6=11,10,6, 17,7,8=17,7,8, 11,10,5=11,10,5, 6,7,14=6,7,14, 17,7,7=17,7,7, 11,10,8=11,10,8, 6,7,13=6,7,13, 6,7,12=6,7,12, 11,10,7=11,10,7, 17,7,9=17,7,9, 6,11,6=6,11,6, 4,8,10=4,8,10, 6,11,7=6,11,7, 11,10,9=11,10,9, 6,11,8=6,11,8, 6,11,9=6,11,9, 4,8,13=4,8,13, 9,9,11=9,9,11, 9,9,12=9,9,12, 4,8,11=4,8,11, 9,9,10=9,9,10, 4,8,12=4,8,12, 1,6,10=1,6,10, 4,8,16=4,8,16, 16,9,9=16,9,9, 16,9,6=16,9,6, 10,10,10=10,10,10, 2,9,5=2,9,5, 10,4,9=10,4,9, 10,4,7=10,4,7, 10,4,8=10,4,8, 10,4,6=10,4,6, 3,7,9=3,7,9, 8,14,7=8,14,7, 8,14,8=8,14,8, 8,14,6=8,14,6, 8,14,9=8,14,9, 5,3,9=5,3,9, 6,11,5=6,11,5, 5,3,8=5,3,8, 5,3,7=5,3,7, 5,3,6=5,3,6, 6,9,6=6,9,6, 6,9,5=6,9,5, 6,9,8=6,9,8, 6,9,7=6,9,7, 14,12,5=14,12,5, 14,12,6=14,12,6, 14,12,7=14,12,7, 14,12,8=14,12,8, 14,12,9=14,12,9, 8,13,4=8,13,4, 8,13,5=8,13,5, 7,7,5=7,7,5, 14,6,12=14,6,12, 14,6,13=14,6,13, 7,7,9=7,7,9, 7,7,8=7,7,8, 7,7,7=7,7,7, 7,7,6=7,7,6, 6,9,9=6,9,9, 16,4,5=16,4,5, 10,14,9=10,14,9, 10,14,8=10,14,8, 8,5,6=8,5,6, 15,6,7=15,6,7, 10,14,5=10,14,5, 8,5,8=8,5,8, 8,5,7=8,5,7, 10,14,7=10,14,7, 15,6,9=15,6,9, 15,6,8=15,6,8, 10,14,6=10,14,6, 8,5,9=8,5,9, 10,14,3=10,14,3, 8,13,8=8,13,8, 5,11,8=5,11,8, 5,11,7=5,11,7, 8,13,9=8,13,9, 5,11,6=5,11,6, 8,13,6=8,13,6, 14,8,9=14,8,9, 9,3,7=9,3,7, 8,13,7=8,13,7, 14,8,8=14,8,8, 9,3,8=9,3,8, 9,3,9=9,3,9, 14,8,7=14,8,7, 14,8,6=14,8,6, 5,11,9=5,11,9, 14,8,5=14,8,5, 5,7,13=5,7,13, 5,7,11=5,7,11, 5,7,12=5,7,12, 18,7,11=18,7,11, 5,7,10=5,7,10, 11,9,11=11,9,11, 11,9,10=11,9,10, 12,13,12=12,13,12, 12,13,13=12,13,13, 12,13,14=12,13,14, 9,15,13=9,15,13, 6,11,15=6,11,15, 9,15,12=9,15,12, 6,11,14=6,11,14, 9,15,11=9,15,11, 9,15,10=9,15,10, 6,11,13=6,11,13, 6,11,12=6,11,12, 6,11,11=6,11,11, 4,14,7=4,14,7, 6,11,10=6,11,10, 9,15,15=9,15,15, 9,15,14=9,15,14, 13,15,9=13,15,9, 13,15,7=13,15,7, 14,6,10=14,6,10, 1,7,10=1,7,10, 14,6,11=14,6,11, 16,11,11=16,11,11, 12,13,10=12,13,10, 16,11,13=16,11,13, 12,13,11=12,13,11, 10,4,12=10,4,12, 10,4,10=10,4,10, 10,4,11=10,4,11, 8,11,14=8,11,14, 6,7,8=6,7,8, 9,7,12=9,7,12, 8,11,13=8,11,13, 9,7,11=9,7,11, 6,7,7=6,7,7, 14,10,5=14,10,5, 8,11,12=8,11,12, 9,7,14=9,7,14, 14,10,6=14,10,6, 8,11,11=8,11,11, 6,7,9=6,7,9, 9,7,13=9,7,13, 14,10,7=14,10,7, 6,13,10=6,13,10, 14,10,8=14,10,8, 6,13,11=6,13,11, 14,10,9=14,10,9, 6,13,12=6,13,12, 6,7,6=6,7,6, 6,13,13=6,13,13, 8,11,15=8,11,15, 9,11,9=9,11,9, 6,13,14=6,13,14, 8,11,6=8,11,6, 8,11,10=8,11,10, 4,6,10=4,6,10, 8,11,7=8,11,7, 8,11,4=8,11,4, 4,6,12=4,6,12, 9,7,10=9,7,10, 8,11,5=8,11,5, 4,6,11=4,6,11, 4,6,14=4,6,14, 4,6,13=4,6,13, 4,6,15=4,6,15, 11,11,10=11,11,10, 7,5,9=7,5,9, 7,5,8=7,5,8, 14,10,3=14,10,3, 15,8,9=15,8,9, 15,8,8=15,8,8, 8,3,8=8,3,8, 8,3,7=8,3,7, 10,12,7=10,12,7, 8,3,9=8,3,9, 10,12,6=10,12,6, 15,8,7=15,8,7, 10,12,9=10,12,9, 10,12,8=10,12,8, 11,11,12=11,11,12, 10,12,3=10,12,3, 11,11,11=11,11,11, 10,12,5=10,12,5, 11,11,14=11,11,14, 11,11,13=11,11,13, 10,12,4=10,12,4, 14,8,13=14,8,13, 11,11,15=11,11,15, 14,8,12=14,8,12, 14,8,11=14,8,11, 7,4,14=7,4,14, 14,8,10=14,8,10, 7,4,15=7,4,15, 7,4,12=7,4,12, 7,4,13=7,4,13, 8,11,8=8,11,8, 7,4,10=7,4,10, 8,11,9=8,11,9, 7,4,11=7,4,11, 11,9,13=11,9,13, 11,9,12=11,9,12, 5,13,9=5,13,9, 11,9,15=11,9,15, 5,13,8=5,13,8, 5,13,7=5,13,7, 11,9,14=11,9,14, 8,7,15=8,7,15, 10,6,15=10,6,15, 8,7,14=8,7,14, 10,6,14=10,6,14, 10,6,13=10,6,13, 15,15,10=15,15,10, 8,7,11=8,7,11, 10,6,11=10,6,11, 10,6,10=10,6,10, 8,7,10=8,7,10, 8,7,13=8,7,13, 8,7,12=8,7,12, 12,9,15=12,9,15, 12,9,13=12,9,13, 12,9,14=12,9,14, 12,9,17=12,9,17, 4,13,12=4,13,12, 4,13,13=4,13,13, 14,11,12=14,11,12, 4,12,9=4,12,9, 14,11,13=14,11,13, 4,12,8=4,12,8, 4,12,7=4,12,7, 14,11,10=14,11,10, 14,11,11=14,11,11, 5,5,13=5,5,13, 12,9,11=12,9,11, 12,9,12=12,9,12, 12,9,10=12,9,10, 5,5,10=5,5,10, 9,11,8=9,11,8, 9,11,7=9,11,7, 9,11,6=9,11,6, 5,5,12=5,5,12, 5,5,11=5,5,11, 9,11,5=9,11,5, 9,11,4=9,11,4, 9,11,3=9,11,3, 18,9,11=18,9,11, 10,8,10=10,8,10, 10,8,11=10,8,11, 10,8,12=10,8,12, 10,8,13=10,8,13, 10,13,14=10,13,14, 10,8,14=10,8,14, 9,13,9=9,13,9, 10,8,15=10,8,15, 10,13,15=10,13,15, 9,13,8=9,13,8, 10,8,16=10,8,16, 9,13,7=9,13,7, 10,8,18=10,8,18, 14,16,6=14,16,6, 14,16,7=14,16,7, 14,16,8=14,16,8, 14,16,9=14,16,9, 7,14,9=7,14,9, 7,14,8=7,14,8, 7,14,7=7,14,7, 10,10,8=10,10,8, 8,9,5=8,9,5, 8,9,6=8,9,6, 10,10,9=10,10,9, 8,9,4=8,9,4, 10,10,4=10,10,4, 9,7,8=9,7,8, 10,10,5=10,10,5, 1,9,10=1,9,10, 9,7,9=9,7,9, 10,10,6=10,10,6, 16,13,11=16,13,11, 10,10,7=10,10,7, 16,13,13=16,13,13, 10,10,2=10,10,2, 10,10,3=10,10,3, 15,11,9=15,11,9, 15,11,8=15,11,8, 18,11,11=18,11,11, 9,7,3=9,7,3, 13,6,5=13,6,5, 9,7,5=9,7,5, 9,7,6=9,7,6, 15,11,7=15,11,7, 2,11,5=2,11,5, 9,7,7=9,7,7, 13,6,7=13,6,7, 8,9,9=8,9,9, 15,7,13=15,7,13, 13,6,8=13,6,8, 10,13,10=10,13,10, 15,7,12=15,7,12, 10,13,11=10,13,11, 13,6,9=13,6,9, 14,4,7=14,4,7, 15,7,11=15,7,11, 10,13,12=10,13,12, 8,9,7=8,9,7, 15,7,10=15,7,10, 8,9,8=8,9,8, 10,13,13=10,13,13, 9,5,10=9,5,10, 9,5,12=9,5,12, 9,5,11=9,5,11, 8,13,13=8,13,13, 9,5,13=9,5,13, 8,13,14=8,13,14, 15,7,15=15,7,15, 15,7,14=15,7,14, 8,13,10=8,13,10, 8,13,11=8,13,11, 13,15,10=13,15,10, 8,13,12=8,13,12, 11,13,11=11,13,11, 11,13,12=11,13,12, 11,13,10=11,13,10, 7,13,12=7,13,12, 14,15,10=14,15,10, 7,13,13=7,13,13, 7,13,10=7,13,10, 7,13,11=7,13,11, 11,13,15=11,13,15, 11,13,13=11,13,13, 11,13,14=11,13,14, 7,13,14=7,13,14, 5,9,9=5,9,9, 8,9,10=8,9,10, 5,9,8=5,9,8, 8,9,11=8,9,11, 5,9,7=5,9,7, 5,9,6=5,9,6, 5,9,4=5,9,4, 9,13,6=9,13,6, 9,13,5=9,13,5, 5,9,14=5,9,14, 9,13,4=9,13,4, 5,9,13=5,9,13, 5,9,12=5,9,12, 8,9,14=8,9,14, 5,9,11=5,9,11, 8,9,15=8,9,15, 5,9,10=5,9,10, 8,9,12=8,9,12, 8,9,13=8,9,13, 9,15,9=9,15,9, 9,15,8=9,15,8, 9,15,7=9,15,7, 14,14,5=14,14,5, 9,15,6=9,15,6, 14,14,7=14,14,7, 12,7,12=12,7,12, 14,14,8=14,14,8, 12,7,11=12,7,11, 14,14,9=14,14,9, 7,9,9=7,9,9, 12,7,14=12,7,14, 12,7,13=12,7,13, 7,9,8=7,9,8, 12,7,15=12,7,15, 12,7,17=12,7,17, 7,9,7=7,9,7, 9,13,10=9,13,10, 7,9,6=7,9,6, 9,13,11=9,13,11, 4,15,12=4,15,12, 7,9,5=7,9,5, 7,9,4=7,9,4, 14,13,15=14,13,15, 9,13,14=9,13,14, 14,13,14=14,13,14, 9,13,15=9,13,15, 9,13,12=9,13,12, 9,13,13=9,13,13, 14,13,11=14,13,11, 7,12,7=7,12,7, 14,13,10=14,13,10, 7,12,6=7,12,6, 14,13,13=14,13,13, 7,12,9=7,12,9, 9,13,16=9,13,16, 14,13,12=14,13,12, 7,12,8=7,12,8, 7,15,13=7,15,13, 7,15,12=7,15,12, 7,15,11=7,15,11, 8,7,6=8,7,6, 7,15,10=7,15,10, 8,7,5=8,7,5, 8,7,8=8,7,8, 8,7,7=8,7,7, 15,4,7=15,4,7, 15,4,6=15,4,6, 12,15,11=12,15,11, 12,15,10=12,15,10, 12,15,13=12,15,13, 12,15,12=12,15,12, 12,11,7=12,11,7, 12,11,8=12,11,8, 12,11,5=12,11,5, 12,11,6=12,11,6, 9,5,6=9,5,6, 12,11,4=12,11,4, 9,5,7=9,5,7, 14,6,9=14,6,9, 12,7,10=12,7,10, 9,5,8=9,5,8, 14,6,8=14,6,8, 14,6,7=14,6,7, 13,8,5=13,8,5, 9,5,9=9,5,9, 13,8,6=13,8,6, 8,7,9=8,7,9, 13,8,7=13,8,7, 13,8,8=13,8,8, 13,8,9=13,8,9, 12,11,9=12,11,9, 15,13,12=15,13,12, 6,15,10=6,15,10, 17,10,6=17,10,6, 6,15,11=6,15,11, 15,13,10=15,13,10, 12,8,5=12,8,5, 12,8,6=12,8,6, 6,15,14=6,15,14, 15,13,14=15,13,14, 12,8,3=12,8,3, 12,8,4=12,8,4, 12,8,9=12,8,9, 12,8,7=12,8,7, 12,8,8=12,8,8, 14,4,10=14,4,10, 7,12,5=7,12,5, 7,12,4=7,12,4, 2,5,10=2,5,10, 7,6,14=7,6,14, 7,6,13=7,6,13, 15,9,10=15,9,10, 7,6,12=7,6,12, 15,9,11=15,9,11, 15,9,12=15,9,12, 7,6,11=7,6,11, 7,6,10=7,6,10, 15,9,13=15,9,13, 15,9,14=15,9,14, 15,9,15=15,9,15, 10,15,13=10,15,13, 10,15,12=10,15,12, 5,15,11=5,15,11, 10,15,11=10,15,11, 10,15,10=10,15,10, 15,11,10=15,11,10, 12,5,8=12,5,8, 15,11,13=15,11,13, 12,5,9=12,5,9, 15,11,11=15,11,11, 9,3,13=9,3,13, 12,5,6=12,5,6, 15,11,12=15,11,12, 12,5,7=12,5,7, 7,8,10=7,8,10, 8,15,12=8,15,12, 7,8,11=7,8,11, 8,15,11=8,15,11, 7,8,12=7,8,12, 11,17,5=11,17,5, 6,14,5=6,14,5, 7,8,13=7,8,13, 8,15,13=8,15,13, 7,8,14=7,8,14, 3,11,9=3,11,9, 11,17,7=11,17,7, 6,14,8=6,14,8, 11,17,6=11,17,6, 8,15,10=8,15,10, 6,14,9=6,14,9, 11,7,5=11,7,5, 11,15,10=11,15,10, 11,7,6=11,7,6, 11,7,7=11,7,7, 11,7,8=11,7,8, 11,15,12=11,15,12, 11,7,4=11,7,4, 11,15,11=11,15,11, 15,4,10=15,4,10, 11,7,9=11,7,9, 7,10,9=7,10,9, 7,10,8=7,10,8, 10,9,6=10,9,6, 13,9,13=13,9,13, 13,9,12=13,9,12, 10,9,7=10,9,7, 7,11,11=7,11,11, 10,9,4=10,9,4, 13,9,11=13,9,11, 10,9,5=10,9,5, 7,11,10=7,11,10, 13,9,10=13,9,10, 10,9,3=10,9,3, 7,11,13=7,11,13, 7,11,12=7,11,12, 7,11,15=7,11,15, 10,9,8=10,9,8, 10,9,9=10,9,9, 3,8,9=3,8,9, 7,11,14=7,11,14, 16,12,9=16,12,9, 12,13,6=12,13,6, 12,13,4=12,13,4, 4,6,9=4,6,9, 12,13,9=12,13,9, 12,13,7=12,13,7, 12,13,8=12,13,8, 10,11,15=10,11,15, 10,11,14=10,11,14, 10,11,13=10,11,13, 10,11,12=10,11,12, 10,11,18=10,11,18, 12,5,10=12,5,10, 12,5,11=12,5,11, 12,5,12=12,5,12, 12,5,13=12,5,13, 3,15,10=3,15,10, 13,12,16=13,12,16, 13,12,14=13,12,14, 13,12,15=13,12,15, 13,12,12=13,12,12, 13,12,13=13,12,13, 13,12,10=13,12,10, 13,12,11=13,12,11, 13,9,15=13,9,15, 13,9,14=13,9,14, 7,10,5=7,10,5, 7,10,4=7,10,4, 7,10,7=7,10,7, 7,10,6=7,10,6, 7,10,2=7,10,2, 10,11,11=10,11,11, 10,11,10=10,11,10, 12,3,6=12,3,6, 9,10,18=9,10,18, 12,3,7=12,3,7, 12,3,5=12,3,5, 12,3,8=12,3,8, 12,3,9=12,3,9, 11,15,7=11,15,7, 11,15,9=11,15,9, 11,15,8=11,15,8, 3,13,10=3,13,10, 11,5,7=11,5,7, 11,5,8=11,5,8, 11,5,9=11,5,9, 11,5,6=11,5,6, 13,7,14=13,7,14, 13,7,15=13,7,15, 13,7,12=13,7,12, 10,7,8=10,7,8, 10,7,9=10,7,9, 10,7,6=10,7,6, 10,7,7=10,7,7, 10,7,4=10,7,4, 10,7,5=10,7,5, 9,9,6=9,9,6, 9,9,7=9,9,7, 9,9,8=9,9,8, 9,9,9=9,9,9, 5,6,9=5,6,9, 5,6,8=5,6,8, 5,6,7=5,6,7, 9,9,3=9,9,3, 9,9,4=9,9,4, 9,9,5=9,9,5, 5,6,4=5,6,4, 9,10,10=9,10,10, 12,15,9=12,15,9, 9,10,12=9,10,12, 9,10,11=9,10,11, 4,8,9=4,8,9, 6,18,10=6,18,10, 12,15,7=12,15,7, 9,10,14=9,10,14, 9,10,13=9,10,13, 4,8,8=4,8,8, 12,15,8=12,15,8, 9,10,16=9,10,16, 9,10,15=9,10,15, 15,6,12=15,6,12, 15,6,11=15,6,11, 5,12,10=5,12,10, 15,6,10=15,6,10, 5,12,11=5,12,11, 6,4,11=6,4,11, 6,4,10=6,4,10, 16,15,11=16,15,11, 15,12,8=15,12,8, 13,3,8=13,3,8, 13,3,9=13,3,9, 6,4,15=6,4,15, 3,15,9=3,15,9, 12,1,8=12,1,8, 12,1,9=12,1,9, 3,15,7=3,15,7, 17,6,7=17,6,7, 12,1,6=12,1,6, 3,15,8=3,15,8, 12,1,7=12,1,7, 11,13,5=11,13,5, 11,13,4=11,13,4, 14,9,10=14,9,10, 6,10,7=6,10,7, 11,13,7=11,13,7, 6,10,8=6,10,8, 11,13,6=11,13,6, 6,10,9=6,10,9, 11,13,9=11,13,9, 11,13,8=11,13,8, 14,9,14=14,9,14, 3,15,6=3,15,6, 14,9,13=14,9,13, 14,9,12=14,9,12, 14,9,11=14,9,11, 16,8,6=16,8,6, 5,10,13=5,10,13, 11,3,9=11,3,9, 13,10,13=13,10,13, 13,10,12=13,10,12, 5,10,14=5,10,14, 2,6,7=2,6,7, 13,10,15=13,10,15, 5,10,15=5,10,15, 2,6,6=2,6,6, 13,10,14=13,10,14, 16,8,9=16,8,9, 11,3,7=11,3,7, 13,10,11=13,10,11, 13,10,10=13,10,10, 11,3,8=11,3,8, 4,11,9=4,11,9, 4,11,8=4,11,8, 4,11,7=4,11,7, 2,6,9=2,6,9, 5,10,10=5,10,10, 2,6,8=2,6,8, 13,10,16=13,10,16, 5,10,11=5,10,11, 5,10,12=5,10,12, 13,10,18=13,10,18, 10,5,8=10,5,8, 10,5,9=10,5,9, 10,5,6=10,5,6, 3,4,8=3,4,8, 10,5,7=10,5,7, 11,5,11=11,5,11, 11,5,10=11,5,10, 6,10,2=6,10,2, 14,9,15=14,9,15, 6,10,4=6,10,4, 6,10,5=6,10,5, 11,5,13=11,5,13, 11,5,12=11,5,12, 6,10,6=6,10,6, 8,3,13=8,3,13, 8,3,12=8,3,12, 8,3,11=8,3,11, 8,3,10=8,3,10, 6,4,7=6,4,7, 6,4,9=6,4,9, 6,4,8=6,4,8, 7,18,10=7,18,10, 13,7,10=13,7,10, 6,8,12=6,8,12, 6,8,11=6,8,11, 13,7,11=13,7,11, 6,8,10=6,8,10, 6,8,14=6,8,14, 12,10,18=12,10,18, 6,8,13=6,8,13, 12,10,16=12,10,16, 13,11,5=13,11,5, 12,10,15=12,10,15, 13,11,4=13,11,4, 12,10,14=12,10,14, 12,10,13=12,10,13, 12,10,12=12,10,12, 4,7,11=4,7,11, 13,11,9=13,11,9, 12,10,11=12,10,11, 13,11,8=13,11,8, 4,7,10=4,7,10, 12,10,10=12,10,10, 13,11,7=13,11,7, 4,7,13=4,7,13, 13,11,6=13,11,6, 4,7,12=4,7,12, 4,7,16=4,7,16, 16,8,13=16,8,13, 16,8,12=16,8,12, 16,8,15=16,8,15, 16,8,14=16,8,14, 11,11,5=11,11,5, 11,11,4=11,11,4, 17,8,6=17,8,6, 16,8,11=16,8,11, 11,11,7=11,11,7, 16,8,10=16,8,10, 11,11,6=11,11,6, 11,11,9=11,11,9, 6,12,5=6,12,5, 11,11,8=11,11,8, 6,12,6=6,12,6, 6,12,7=6,12,7, 6,12,8=6,12,8, 6,12,9=6,12,9, 2,8,5=2,8,5, 6,6,10=6,6,10, 10,3,8=10,3,8, 6,6,13=6,6,13, 10,3,9=10,3,9, 6,6,11=6,6,11, 10,3,7=10,3,7, 6,6,12=6,6,12, 4,9,10=4,9,10, 4,9,11=4,9,11, 16,10,9=16,10,9, 16,10,6=16,10,6, 4,9,14=4,9,14, 4,9,12=4,9,12, 4,9,13=4,9,13, 4,9,16=4,9,16, 8,15,8=8,15,8, 8,15,9=8,15,9, 3,11,12=3,11,12, 3,11,13=3,11,13, 3,11,14=3,11,14, 3,11,15=3,11,15, 3,11,10=3,11,10, 3,11,11=3,11,11, 10,3,10=10,3,10, 13,5,15=13,5,15, 13,5,11=13,5,11, 13,5,10=13,5,10, 13,5,13=13,5,13, 13,5,12=13,5,12, 13,13,9=13,13,9, 13,13,8=13,13,8, 13,13,7=13,13,7, 13,13,6=13,13,6, 13,13,5=13,13,5, 11,7,14=11,7,14, 11,7,10=11,7,10, 4,10,12=4,10,12, 11,7,11=11,7,11, 4,10,13=4,10,13, 11,7,12=11,7,12, 4,10,10=4,10,10, 4,10,11=4,10,11, 11,7,13=11,7,13, 8,5,12=8,5,12, 4,10,16=4,10,16, 8,5,13=8,5,13, 4,10,14=4,10,14, 4,10,15=4,10,15, 8,5,10=8,5,10, 8,5,11=8,5,11, 16,10,13=16,10,13, 5,10,5=5,10,5, 12,14,10=12,14,10, 5,10,4=5,10,4, 12,14,12=12,14,12, 16,10,11=16,10,11, 12,14,11=12,14,11, 11,8,15=11,8,15, 11,8,16=11,8,16, 11,8,11=11,8,11, 11,8,12=11,8,12, 11,8,13=11,8,13, 11,8,14=11,8,14, 10,5,13=10,5,13, 4,15,7=4,15,7, 10,5,11=10,5,11, 10,5,12=10,5,12, 10,16,10=10,16,10, 10,5,10=10,5,10, 10,16,11=10,16,11, 11,8,10=11,8,10, 4,5,10=4,5,10, 9,14,12=9,14,12, 9,14,11=9,14,11, 9,14,10=9,14,10, 9,14,15=9,14,15, 9,14,14=9,14,14, 9,14,13=9,14,13, 6,8,7=6,8,7, 6,8,6=6,8,6, 11,10,18=11,10,18, 6,8,9=6,8,9, 6,8,8=6,8,8, 14,13,5=14,13,5, 14,13,9=14,13,9, 11,10,11=11,10,11, 11,10,10=11,10,10, 11,10,13=11,10,13, 6,8,1=6,8,1, 11,10,12=11,10,12, 11,10,15=11,10,15, 8,12,5=8,12,5, 11,10,14=11,10,14, 8,12,6=8,12,6, 11,10,16=11,10,16, 8,12,4=8,12,4, 7,6,6=7,6,6, 7,6,4=7,6,4, 16,3,9=16,3,9, 16,3,8=16,3,8, 7,6,9=7,6,9, 7,6,8=7,6,8, 7,6,7=7,6,7, 8,6,13=8,6,13, 8,6,14=8,6,14, 8,6,15=8,6,15, 8,10,18=8,10,18, 16,3,7=16,3,7, 8,6,10=8,6,10, 16,3,6=16,3,6, 8,6,11=8,6,11, 8,6,12=8,6,12, 18,8,11=18,8,11, 9,8,14=9,8,14, 8,10,13=8,10,13, 10,15,8=10,15,8, 8,10,12=8,10,12, 9,8,15=9,8,15, 10,15,7=10,15,7, 9,8,12=9,8,12, 8,10,11=8,10,11, 8,4,7=8,4,7, 9,8,13=9,8,13, 8,10,10=8,10,10, 10,15,9=10,15,9, 8,4,9=8,4,9, 8,4,8=8,4,8, 8,10,16=8,10,16, 10,15,3=10,15,3, 8,10,15=8,10,15, 9,8,16=9,8,16, 8,10,14=8,10,14, 15,5,9=15,5,9, 15,5,6=15,5,6, 9,8,10=9,8,10, 9,8,11=9,8,11, 8,12,9=8,12,9, 5,12,7=5,12,7, 5,12,6=5,12,6, 8,12,7=8,12,7, 5,12,5=5,12,5, 8,12,8=8,12,8, 14,7,9=14,7,9, 14,7,8=14,7,8, 5,12,9=5,12,9, 14,7,7=14,7,7, 13,9,4=13,9,4, 4,14,12=4,14,12, 5,12,8=5,12,8, 14,7,6=14,7,6, 13,9,6=13,9,6, 14,7,5=14,7,5, 14,12,13=14,12,13, 13,9,5=13,9,5, 13,9,8=13,9,8, 13,9,7=13,9,7, 13,9,9=13,9,9, 14,12,10=14,12,10, 13,4,10=13,4,10, 14,12,11=14,12,11, 13,4,11=13,4,11, 14,12,12=14,12,12, 6,9,14=6,9,14, 6,9,10=6,9,10, 6,9,11=6,9,11, 6,9,12=6,9,12, 5,6,14=5,6,14, 5,6,15=5,6,15, 6,9,13=6,9,13, 1,8,10=1,8,10, 4,13,9=4,13,9, 5,6,12=5,6,12, 5,6,13=5,6,13, 5,6,10=5,6,10, 4,13,7=4,13,7, 5,6,11=5,6,11, 4,12,11=4,12,11, 12,12,11=12,12,11, 12,12,12=12,12,12, 4,12,10=4,12,10, 12,12,13=12,12,13, 12,12,14=12,12,14, 12,12,15=12,12,15, 12,12,16=12,12,16, 4,12,13=4,12,13, 4,12,12=4,12,12, 14,10,10=14,10,10, 9,10,9=9,10,9, 9,10,8=9,10,8, 9,10,7=9,10,7, 9,10,6=9,10,6, 9,10,5=9,10,5, 9,10,4=9,10,4, 14,10,13=14,10,13, 14,10,12=14,10,12, 9,10,3=9,10,3, 14,10,11=14,10,11, 9,10,2=9,10,2, 6,6,9=6,6,9, 14,11,4=14,11,4, 6,6,8=6,6,8, 14,11,5=14,11,5, 14,11,6=14,11,6, 14,11,7=14,11,7, 6,6,4=6,6,4, 14,11,8=14,11,8, 14,11,9=14,11,9, 9,12,9=9,12,9, 6,6,7=6,6,7, 9,12,8=9,12,8, 8,10,4=8,10,4, 8,10,2=8,10,2, 8,10,7=8,10,7, 14,7,12=14,7,12, 14,7,11=14,7,11, 8,10,8=8,10,8, 8,10,5=8,10,5, 14,7,10=14,7,10, 12,12,10=12,12,10, 8,10,6=8,10,6, 7,3,11=7,3,11, 7,4,8=7,4,8, 7,4,7=7,4,7, 7,3,10=7,3,10, 7,4,9=7,4,9, 16,5,5=16,5,5, 15,7,9=15,7,9, 10,13,9=10,13,9, 10,13,6=10,13,6, 10,13,5=10,13,5, 15,7,8=15,7,8, 10,13,8=10,13,8, 15,7,7=15,7,7, 10,13,7=10,13,7, 10,13,3=10,13,3, 9,16,11=9,16,11, 14,9,9=14,9,9, 8,10,9=8,10,9, 14,9,8=14,9,8, 14,7,13=14,7,13, 11,12,10=11,12,10, 14,9,7=14,9,7, 5,14,9=5,14,9, 14,9,6=14,9,6, 11,12,11=11,12,11, 5,14,8=5,14,8, 14,9,5=14,9,5, 2,10,5=2,10,5, 6,12,14=6,12,14, 6,12,13=6,12,13, 6,12,12=6,12,12, 6,12,11=6,12,11, 6,12,10=6,12,10, 12,9,4=12,9,4, 16,4,11=16,4,11, 12,9,5=12,9,5, 12,9,3=12,9,3, 12,9,8=12,9,8, 11,12,14=11,12,14, 12,9,9=12,9,9, 11,12,15=11,12,15, 12,9,6=12,9,6, 11,12,12=11,12,12, 12,9,7=12,9,7, 11,12,13=11,12,13, 11,12,16=11,12,16, 7,5,15=7,5,15, 7,5,14=7,5,14, 7,5,13=7,5,13, 8,8,10=8,8,10, 7,5,12=7,5,12, 7,5,11=7,5,11, 7,5,10=7,5,10, 8,8,15=8,8,15, 8,8,12=8,8,12, 8,8,11=8,8,11, 8,8,14=8,8,14, 17,11,6=17,11,6, 8,8,13=8,8,13, 9,6,11=9,6,11, 8,12,16=8,12,16, 9,6,10=9,6,10, 7,13,4=7,13,4, 9,6,13=9,6,13, 6,14,10=6,14,10, 9,6,12=9,6,12, 6,14,11=6,14,11, 6,14,12=6,14,12, 8,12,12=8,12,12, 9,6,15=9,6,15, 8,12,13=8,12,13, 13,16,11=13,16,11, 9,6,14=9,6,14, 6,14,13=6,14,13, 8,12,14=8,12,14, 6,14,14=6,14,14, 8,12,15=8,12,15, 12,8,13=12,8,13, 12,8,12=12,8,12, 12,8,15=12,8,15, 8,12,10=8,12,10, 12,8,14=12,8,14, 8,12,11=8,12,11, 12,8,17=12,8,17, 12,8,16=12,8,16, 5,8,9=5,8,9, 5,8,8=5,8,8, 5,8,7=5,8,7, 5,8,6=5,8,6, 5,8,4=5,8,4, 9,12,7=9,12,7, 9,12,6=9,12,6, 9,12,5=9,12,5, 9,12,4=9,12,4, 14,14,11=14,14,11, 14,14,14=14,14,14, 9,14,9=9,14,9, 9,14,8=9,14,8, 9,14,7=9,14,7, 9,14,6=9,14,6, 12,16,11=12,16,11, 12,8,11=12,8,11, 10,7,18=10,7,18, 12,8,10=12,8,10, 10,14,11=10,14,11, 7,15,8=7,15,8, 10,14,12=10,14,12, 10,7,15=10,7,15, 10,7,14=10,7,14, 10,14,13=10,14,13, 10,14,14=10,14,14, 10,7,13=10,7,13, 7,15,9=7,15,9, 18,10,11=18,10,11, 10,7,12=10,7,12, 10,7,11=10,7,11, 10,7,10=10,7,10, 10,9,10=10,9,10, 10,14,10=10,14,10, 10,9,11=10,9,11, 8,8,1=8,8,1, 10,9,12=10,9,12, 10,9,13=10,9,13, 10,9,14=10,9,14, 10,11,8=10,11,8, 8,8,5=8,8,5, 10,9,15=10,9,15, 8,8,4=8,8,4, 10,11,7=10,11,7, 8,8,7=8,8,7, 10,9,18=10,9,18, 10,11,9=10,11,9, 8,8,6=8,8,6, 9,6,9=9,6,9, 10,11,4=10,11,4, 10,11,3=10,11,3, 10,11,6=10,11,6, 10,11,5=10,11,5, 15,10,3=15,10,3, 12,10,8=12,10,8, 2,12,6=2,12,6, 12,10,9=12,10,9, 2,12,5=2,12,5, 15,10,9=15,10,9, 12,10,6=12,10,6, 12,10,7=12,10,7, 2,12,7=2,12,7, 12,10,4=12,10,4, 9,6,5=9,6,5, 12,10,5=12,10,5, 9,6,6=9,6,6, 9,12,10=9,12,10, 13,5,6=13,5,6, 15,10,8=15,10,8, 9,6,7=9,6,7, 13,5,7=13,5,7, 9,6,8=9,6,8, 13,5,8=13,5,8, 12,10,3=12,10,3, 9,12,13=9,12,13, 8,8,9=8,8,9, 13,5,9=13,5,9, 8,8,8=8,8,8, 14,3,8=14,3,8, 9,12,14=9,12,14, 9,12,11=9,12,11, 9,12,12=9,12,12, 9,12,15=9,12,15, 9,12,16=9,12,16, 12,7,3=12,7,3, 12,7,6=12,7,6, 12,7,7=12,7,7, 12,7,5=12,7,5, 12,7,8=12,7,8, 12,7,9=12,7,9, 14,5,10=14,5,10, 11,9,4=11,9,4, 11,9,5=11,9,5, 11,9,6=11,9,6, 15,8,10=15,8,10, 15,8,11=15,8,11, 13,14,15=13,14,15, 15,8,12=15,8,12, 13,14,14=13,14,14, 13,14,13=13,14,13, 13,14,12=13,14,12, 5,14,11=5,14,11, 5,14,12=5,14,12, 5,14,10=5,14,10, 11,9,7=11,9,7, 11,9,8=11,9,8, 11,9,9=11,9,9, 5,14,13=5,14,13, 7,11,4=7,11,4, 15,12,10=15,12,10, 15,12,11=15,12,11, 7,11,6=7,11,6, 7,11,5=7,11,5, 10,14,15=10,14,15, 15,12,12=15,12,12, 15,8,16=15,8,16, 14,5,13=14,5,13, 11,14,12=11,14,12, 11,14,13=11,14,13, 11,14,10=11,14,10, 11,14,11=11,14,11, 3,9,12=3,9,12, 7,14,13=7,14,13, 3,9,11=3,9,11, 14,14,10=14,14,10, 7,14,11=7,14,11, 7,14,12=7,14,12, 3,9,13=3,9,13, 7,14,10=7,14,10, 3,9,10=3,9,10, 14,15,5=14,15,5, 14,15,7=14,15,7, 14,15,9=14,15,9, 11,14,14=11,14,14, 7,8,9=7,8,9, 11,14,15=11,14,15, 16,12,11=16,12,11, 16,12,13=16,12,13, 7,8,4=7,8,4, 7,8,1=7,8,1, 7,8,8=7,8,8, 7,8,7=7,8,7, 7,8,6=7,8,6, 7,8,5=7,8,5, 7,13,9=7,13,9, 5,8,13=5,8,13, 5,8,12=5,8,12, 7,13,6=7,13,6, 5,8,11=5,8,11, 7,13,5=7,13,5, 5,8,10=5,8,10, 7,13,8=7,13,8, 7,13,7=7,13,7, 8,6,2=8,6,2, 8,6,5=8,6,5, 9,4,10=9,4,10, 9,4,11=9,4,11, 8,6,7=8,6,7, 8,14,14=8,14,14, 9,4,12=9,4,12, 8,6,6=8,6,6, 8,14,15=8,14,15, 8,6,9=8,6,9, 8,6,8=8,6,8, 9,4,15=9,4,15, 12,6,10=12,6,10, 8,14,10=8,14,10, 13,14,11=13,14,11, 13,14,10=13,14,10, 8,14,11=8,14,11, 12,6,11=12,6,11, 12,6,12=12,6,12, 8,14,12=8,14,12, 8,14,13=8,14,13, 12,6,13=12,6,13, 12,6,15=12,6,15, 12,6,17=12,6,17, 12,14,14=12,14,14, 5,10,9=5,10,9, 12,12,6=12,12,6, 12,12,7=12,12,7, 5,10,8=5,10,8, 12,12,4=12,12,4, 5,10,7=5,10,7, 12,12,5=12,12,5, 5,10,6=5,10,6, 12,14,15=12,14,15, 9,4,7=9,4,7, 9,4,8=9,4,8, 12,12,3=12,12,3, 9,4,9=9,4,9, 14,5,9=14,5,9, 13,7,6=13,7,6, 13,7,7=13,7,7, 13,7,8=13,7,8, 13,7,9=13,7,9, 12,12,8=12,12,8, 12,12,9=12,12,9}
				solution part1:3326
				FOUND TRUE HOLE: [12,2,11]
				Surface reduction: 6
				Solution part2: 3320 (too high)
				1=[3,7,9, 4,7,9, 5,7,9, 6,7,9, 7,7,9, 8,7,9, 9,7,9, 10,7,9, 11,7,9, 12,7,9, 13,7,9, 14,7,9, 15,7,9, 16,7,9, 17,7,9, 17,7,8, 4,8,8, 5,8,8, 6,8,8, 7,8,8, 8,8,8, 9,8,8, 10,8,8, 11,8,8, 12,8,8, 13,8,8, 14,8,8, 15,8,8, 15,9,8, 3,10,8, 4,10,8, 5,10,8, 6,10,8, 7,10,8, 8,10,8, 9,10,8, 10,10,8, 11,10,8, 12,10,8, 13,10,8, 14,10,8, 15,10,8, 15,11,8, 4,12,8, 5,12,8, 6,12,8, 7,12,8, 8,12,8, 9,12,8, 10,12,8, 11,12,8, 12,12,8, 13,12,8, 14,12,8, 15,12,8, 15,13,8, 15,13,9, 4,12,9, 5,12,9, 6,12,9, 7,12,9, 8,12,9, 9,12,9, 10,12,9, 11,12,9, 12,12,9, 13,12,9, 14,12,9, 14,11,9, 3,10,9, 4,10,9, 5,10,9, 6,10,9, 7,10,9, 8,10,9, 9,10,9, 10,10,9, 11,10,9, 12,10,9, 13,10,9, 14,10,9, 15,10,9, 16,10,9, 16,9,9, 3,9,10, 4,9,10, 5,9,10, 6,9,10, 7,9,10, 8,9,10, 9,9,10, 10,9,10, 11,9,10, 12,9,10, 13,9,10, 14,9,10, 15,9,10, 15,8,10, 4,7,10, 5,7,10, 6,7,10, 7,7,10, 8,7,10, 9,7,10, 10,7,10, 11,7,10, 12,7,10, 13,7,10, 14,7,10, 15,7,10, 15,6,10, 4,5,10, 5,5,10, 6,5,10, 7,5,10, 8,5,10, 9,5,10, 10,5,10, 11,5,10, 12,5,10, 13,5,10, 14,5,10, 15,5,10, 15,4,10, 6,4,9, 7,4,9, 8,4,9, 9,4,9, 10,4,9, 11,4,9, 12,4,9, 12,3,9, 5,3,8, 5,3,7, 5,3,6, 7,3,8, 8,3,8, 9,3,8, 10,3,8, 11,3,8, 12,3,8, 13,3,8, 14,3,8, 13,4,8, 6,5,8, 5,6,8, 6,6,8, 7,6,8, 8,6,8, 9,6,8, 10,6,8, 11,6,8, 12,6,8, 13,6,8, 14,6,8, 15,6,8, 15,6,7, 5,7,7, 6,7,7, 7,7,7, 8,7,7, 9,7,7, 10,7,7, 11,7,7, 12,7,7, 13,7,7, 14,7,7, 15,7,7, 16,7,7, 17,7,7, 17,6,7, 17,5,7, 17,7,6, 16,8,6, 17,8,6, 17,9,6, 16,10,6, 17,10,6, 17,11,6, 16,11,5, 16,11,7, 4,10,7, 5,10,7, 6,10,7, 7,10,7, 8,10,7, 9,10,7, 10,10,7, 11,10,7, 12,10,7, 13,10,7, 14,10,7, 14,9,7, 4,9,6, 5,9,6, 6,9,6, 7,9,6, 8,9,6, 9,9,6, 10,9,6, 11,9,6, 12,9,6, 13,9,6, 14,9,6, 14,8,6, 5,7,6, 6,7,6, 7,7,6, 8,7,6, 9,7,6, 10,7,6, 11,7,6, 12,7,6, 13,7,6, 14,7,6, 14,7,5, 14,8,5, 7,7,5, 8,7,5, 9,7,5, 10,7,5, 11,7,5, 12,7,5, 12,6,5, 8,6,6, 9,6,6, 10,6,6, 11,6,6, 11,5,6, 8,5,7, 9,5,7, 10,5,7, 11,5,7, 12,5,7, 13,5,7, 13,4,7, 6,5,7, 7,3,7, 8,3,7, 9,3,7, 10,3,7, 11,3,7, 12,3,7, 12,2,7, 12,1,7, 12,1,6, 12,2,6, 12,3,6, 12,3,5, 12,1,8, 12,2,8, 12,2,9, 12,1,9, 10,4,6, 14,4,7, 15,4,7, 15,4,6, 15,5,6, 13,5,6, 13,5,8, 7,5,9, 5,6,9, 6,6,9, 7,6,9, 8,6,9, 9,6,9, 10,6,9, 11,6,9, 12,6,9, 13,6,9, 14,6,9, 15,6,9, 15,5,9, 13,6,5, 11,7,4, 10,8,4, 7,9,4, 8,9,4, 9,9,4, 10,9,4, 11,9,4, 12,9,4, 13,9,4, 13,10,4, 4,10,5, 5,10,5, 6,10,5, 7,10,5, 8,10,5, 9,10,5, 10,10,5, 11,10,5, 12,10,5, 13,10,5, 14,10,5, 14,9,5, 14,11,5, 6,12,5, 5,12,6, 6,12,6, 7,12,6, 8,12,6, 9,12,6, 10,12,6, 11,12,6, 12,12,6, 12,11,6, 5,10,6, 6,10,6, 7,10,6, 8,10,6, 9,10,6, 10,10,6, 11,10,6, 12,10,6, 13,10,6, 14,10,6, 14,11,6, 14,12,6, 14,12,5, 7,13,5, 6,14,5, 6,15,5, 8,13,5, 9,13,5, 10,13,5, 11,13,5, 11,13,4, 12,13,4, 12,12,4, 7,11,4, 8,11,4, 9,11,4, 10,11,4, 11,11,4, 12,11,4, 13,11,4, 14,11,4, 13,12,4, 10,11,3, 9,10,3, 10,10,3, 11,10,3, 12,10,3, 13,10,3, 14,10,3, 15,10,3, 12,9,3, 12,8,3, 12,7,3, 12,6,3, 12,8,4, 10,9,3, 9,8,3, 9,7,3, 10,10,2, 10,12,3, 10,13,3, 10,14,3, 11,14,3, 10,15,3, 7,13,4, 8,13,4, 9,13,4, 12,12,3, 11,13,6, 7,13,7, 4,12,7, 5,12,7, 6,12,7, 7,12,7, 8,12,7, 9,12,7, 10,12,7, 11,12,7, 12,12,7, 13,12,7, 14,12,7, 13,13,7, 8,14,7, 7,14,8, 5,13,8, 6,13,8, 7,13,8, 8,13,8, 9,13,8, 10,13,8, 11,13,8, 12,13,8, 13,13,8, 13,14,8, 8,15,8, 7,15,9, 8,15,9, 9,15,9, 10,15,9, 11,15,9, 12,15,9, 13,15,9, 14,15,9, 14,14,9, 5,14,10, 6,14,10, 7,14,10, 8,14,10, 9,14,10, 10,14,10, 11,14,10, 12,14,10, 13,14,10, 14,14,10, 14,13,10, 5,12,10, 3,11,10, 4,11,10, 5,11,10, 6,11,10, 7,11,10, 8,11,10, 9,11,10, 10,11,10, 11,11,10, 12,11,10, 13,11,10, 14,11,10, 15,11,10, 15,10,10, 3,10,11, 4,10,11, 5,10,11, 6,10,11, 7,10,11, 8,10,11, 9,10,11, 10,10,11, 11,10,11, 12,10,11, 13,10,11, 14,10,11, 15,10,11, 16,10,11, 16,9,11, 3,9,12, 4,9,12, 5,9,12, 6,9,12, 7,9,12, 8,9,12, 9,9,12, 10,9,12, 11,9,12, 12,9,12, 13,9,12, 14,9,12, 15,9,12, 15,8,12, 4,7,12, 5,7,12, 6,7,12, 7,7,12, 8,7,12, 9,7,12, 10,7,12, 11,7,12, 12,7,12, 13,7,12, 14,7,12, 15,7,12, 15,6,12, 14,6,11, 4,7,11, 5,7,11, 6,7,11, 7,7,11, 8,7,11, 9,7,11, 10,7,11, 11,7,11, 12,7,11, 13,7,11, 14,7,11, 15,7,11, 15,6,11, 15,8,11, 16,8,11, 16,8,10, 16,8,12, 16,8,13, 16,9,13, 3,10,13, 4,10,13, 5,10,13, 6,10,13, 7,10,13, 8,10,13, 9,10,13, 10,10,13, 11,10,13, 12,10,13, 13,10,13, 14,10,13, 15,10,13, 16,10,13, 16,11,13, 3,11,12, 4,11,12, 5,11,12, 6,11,12, 7,11,12, 8,11,12, 9,11,12, 10,11,12, 11,11,12, 12,11,12, 13,11,12, 14,11,12, 15,11,12, 15,10,12, 15,12,12, 6,13,12, 4,12,12, 4,12,11, 5,12,11, 6,12,11, 7,12,11, 8,12,11, 9,12,11, 10,12,11, 11,12,11, 12,12,11, 13,12,11, 14,12,11, 15,12,11, 16,12,11, 16,11,11, 16,13,11, 16,14,11, 16,15,11, 15,12,10, 15,13,10, 14,13,11, 5,14,11, 6,14,11, 7,14,11, 8,14,11, 9,14,11, 10,14,11, 11,14,11, 12,14,11, 13,14,11, 14,14,11, 13,14,12, 4,15,12, 5,14,13, 6,14,13, 7,14,13, 8,14,13, 9,14,13, 10,14,13, 11,14,13, 11,13,13, 6,12,13, 7,12,13, 8,12,13, 9,12,13, 10,12,13, 11,12,13, 12,12,13, 13,12,13, 14,12,13, 14,13,13, 12,13,12, 12,13,14, 6,12,14, 7,12,14, 8,12,14, 9,12,14, 10,12,14, 11,12,14, 12,12,14, 13,12,14, 13,11,14, 6,10,14, 4,9,14, 5,9,14, 6,9,14, 7,9,14, 8,9,14, 9,9,14, 10,9,14, 11,9,14, 12,9,14, 13,9,14, 14,9,14, 15,9,14, 15,9,15, 8,8,15, 9,8,15, 10,8,15, 11,8,15, 12,8,15, 12,7,15, 13,7,15, 13,6,15, 8,7,15, 8,7,14, 6,8,14, 7,8,14, 8,8,14, 9,8,14, 10,8,14, 11,8,14, 12,8,14, 13,8,14, 13,7,14, 9,6,14, 7,5,14, 7,4,14, 7,4,13, 8,4,13, 8,3,13, 9,3,13, 8,3,12, 8,4,12, 7,5,12, 5,6,12, 4,6,13, 5,6,13, 6,6,13, 7,6,13, 8,6,13, 9,6,13, 10,6,13, 11,6,13, 12,6,13, 12,5,13, 8,5,12, 9,5,12, 10,5,12, 11,5,12, 12,5,12, 13,5,12, 13,5,11, 6,4,11, 7,4,11, 8,4,11, 9,4,11, 10,4,11, 11,4,11, 12,4,11, 13,4,11, 11,4,12, 11,4,13, 8,3,11, 7,3,10, 8,3,10, 13,5,13, 14,5,13, 14,6,13, 14,7,13, 15,7,13, 15,7,14, 15,7,15, 14,8,13, 4,7,13, 5,7,13, 6,7,13, 7,7,13, 8,7,13, 9,7,13, 10,7,13, 11,7,13, 12,7,13, 12,6,12, 9,6,12, 11,6,14, 5,6,14, 4,6,15, 5,6,15, 7,4,15, 8,4,15, 9,4,15, 7,5,15, 10,7,15, 13,5,15, 12,8,16, 9,9,16, 9,10,16, 8,10,15, 9,10,15, 10,10,15, 11,10,15, 12,10,15, 13,10,15, 13,10,14, 13,10,16, 12,11,15, 5,10,15, 4,10,16, 4,9,16, 4,8,16, 4,7,16, 4,11,16, 5,11,16, 8,12,15, 9,12,15, 10,12,15, 11,12,15, 12,12,15, 13,12,15, 13,12,16, 9,11,16, 9,13,16, 9,13,15, 10,13,15, 11,13,15, 11,14,15, 8,14,14, 9,14,14, 10,14,14, 11,14,14, 12,14,14, 13,14,14, 14,14,14, 14,13,14, 15,13,14, 14,13,15, 13,14,13, 13,14,15, 9,15,14, 9,15,13, 7,15,12, 8,15,12, 9,15,12, 10,15,12, 11,15,12, 12,15,12, 12,15,11, 6,15,10, 7,15,10, 8,15,10, 9,15,10, 10,15,10, 11,15,10, 12,15,10, 13,15,10, 14,15,10, 15,15,10, 10,16,10, 10,16,9, 10,16,8, 10,15,8, 9,15,7, 10,15,7, 11,15,7, 12,15,7, 13,15,7, 14,15,7, 15,15,7, 14,14,7, 14,14,8, 14,16,7, 14,16,6, 14,16,8, 14,16,9, 12,14,7, 9,14,6, 10,14,6, 11,14,6, 12,14,6, 13,14,6, 13,13,6, 13,13,5, 14,13,5, 14,14,5, 14,15,5, 10,14,5, 9,15,6, 12,15,8, 10,16,7, 10,16,11, 11,16,11, 12,16,11, 13,16,11, 12,15,13, 10,15,13, 9,15,15, 13,8,16, 14,8,16, 15,8,16, 12,8,17, 12,7,17, 12,6,17, 12,9,17, 6,14,14, 6,15,14, 14,13,12, 15,13,12, 4,12,13, 4,13,13, 3,11,14, 3,11,15, 16,12,13, 16,13,13, 16,8,14, 16,8,15, 15,11,9, 16,11,9, 16,12,9, 16,13,9, 3,13,10, 3,14,10, 3,15,10, 3,15,9, 3,15,8, 3,15,7, 4,15,7, 4,14,7, 3,15,6, 5,9,4, 5,8,4, 5,7,4, 5,6,4, 6,6,4, 7,6,4, 5,8,7, 6,8,7, 7,8,7, 8,8,7, 9,8,7, 10,8,7, 11,8,7, 12,8,7, 13,8,7, 14,8,7, 15,8,7, 15,9,7, 13,3,9, 10,3,10, 16,8,9]
		*/
	}
	
	public String getCubeKey(int i, int j, int k) {
		return i+","+j+","+k;
	}
	
	public List<Cuboid> getConnections(Cuboid c, List<Cuboid> processed, List<Cuboid> unprocessed) {
		List<Cuboid> connections = new ArrayList<>();
		connections.add(c);
		Cuboid test = virtualMap.get(getCubeKey(c.x+1,c.y,c.z));
		if(test!=null  && !processed.contains(test) && unprocessed.contains(test)) {
			unprocessed.remove(test);
			processed.add(test);
			connections.addAll(getConnections(test,processed,unprocessed));
		}
		test = virtualMap.get(getCubeKey(c.x-1,c.y,c.z));
		if(test!=null  && !processed.contains(test) && unprocessed.contains(test)) {
			unprocessed.remove(test);
			processed.add(test);
			connections.addAll(getConnections(test,processed,unprocessed));
		}
		test = virtualMap.get(getCubeKey(c.x,c.y+1,c.z));
		if(test!=null  && !processed.contains(test) && unprocessed.contains(test)) {
			unprocessed.remove(test);
			processed.add(test);
			connections.addAll(getConnections(test,processed,unprocessed));
		}
		test = virtualMap.get(getCubeKey(c.x,c.y-1,c.z));
		if(test!=null  && !processed.contains(test) && unprocessed.contains(test)) {
			unprocessed.remove(test);
			processed.add(test);
			connections.addAll(getConnections(test,processed,unprocessed));
		}
		test = virtualMap.get(getCubeKey(c.x,c.y,c.z+1));
		if(test!=null  && !processed.contains(test) && unprocessed.contains(test)) {
			unprocessed.remove(test);
			processed.add(test);
			connections.addAll(getConnections(test,processed,unprocessed));
		}
		test = virtualMap.get(getCubeKey(c.x,c.y,c.z-1));
		if(test!=null  && !processed.contains(test) && unprocessed.contains(test)) {
			unprocessed.remove(test);
			processed.add(test);
			connections.addAll(getConnections(test,processed,unprocessed));
		}
		return connections;
	}
	
	public static void main(String[] args) {
		Day18 d18 = new Day18();
		
		d18.readFile();
		d18.fillStructure();
		d18.part1();
		d18.part2();
	}

}
